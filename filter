#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use LWP::UserAgent;

#current logged in user
my $user           = getlogin();
#store everything in the default config directory
#using File::HomeDir might be nicer, but requires a dependency not in core perl
#this is mac-specific, but so is growl
my $pb_config_dir  = "/Users/$user/.config/pianobar";
my $config_file    = "$pb_config_dir/config";
my $config_vars    = {};
open my $cfh, '<', $config_file or warn "Cannot open $config_file for reading (using defaults)!";
while (my $line = readline $cfh) {
    next if !$line;
    my ($key, $value) = split / = /, $line;
    chomp $value if $value;
    $config_vars->{$key} = $value;
}
close $cfh;

#the fifo named pipe file - must remain unchanged (I think)
my $ctl_file         = "$pb_config_dir/ctl";
#location to store album art
my $cover_art_dir    = $config_vars->{cover_art_dir}    || "$pb_config_dir/art";
#sqlite database file
my $dbf              = $config_vars->{sqlite3_db}       || "$pb_config_dir/pandora";
#failover/default image for growl notifications
my $default_image    = $config_vars->{default_image}    || "$pb_config_dir/pandora.png";
#delete album art older than
my $max_cache_days   = $config_vars->{max_cache_days}   || 30;
#autoban tracks from the same album after $max_album_bans (exclusive)
my $max_album_bans   = $config_vars->{max_album_bans}   || 2;
#maximum number of seconds to wait for album art download
my $max_image_wait   = $config_vars->{max_image_wait}   || 2;
#regex autoban for match in artist, track, or title
my $auto_ban_regex   = $config_vars->{auto_ban_regex} ? qr/($config_vars->{auto_ban_regex})/i : qr/(bad music regex|other bad music regex)/i;
#last.fm login information for scrobbling
my $lastfm_username  = $config_vars->{lastfm_username} || $config_vars->{lastfm_user};
my $lastfm_password  = $config_vars->{lastfm_password} || $config_vars->{lastfm_pass};
#minimum percentage for non-banned song to be played for scrobbling
my $scrobble_percent = $config_vars->{scrobble_percent} || .75;

my $rec; #record passed from pianobar
my $ua             = new LWP::UserAgent;
my @args           = @ARGV;
my @lines          = <STDIN>;
my $actionline     = shift @args;
($rec->{action}, $rec->{artist}) = split '=', $actionline;
for (@args) {
    my ($key,$value) = split '=';
    $value =~ s/\n//g; #\n is included in all records
    $rec->{$key} = $value;
}
for (@lines) {
    my ($key,$value) = split '=';
    $value =~ s/\n//g; #\n is included in all records
    $rec->{$key} = $value;
}

$rec->{delay} = eval{$rec->{songDuration}-$rec->{songPlayed}} || 0;
$rec->{artistUrl} = $rec->{detailUrl};
$rec->{artistUrl} =~ s/\/song\/([^\/]+)\/.*/\/artist\/$1/;
my $scont = $ua->get($rec->{detailUrl})->content;
($rec->{albumUrl}) = $scont =~ m/id="album">\s+<a[^>]+href="([^"]+)"/;
my $pandora_url_prefix = 'http://www.pandora.com/music/';
for (qw(detailUrl artistUrl albumUrl)) {
    $rec->{$_} =~ s/^$pandora_url_prefix// if $rec->{$_};
}


my $dbh = DBI->connect("dbi:SQLite:dbname=$dbf","","");

# on login only (minimal impact on total operating cost)
# check sqlite3 database/table status
# delete all album art older than $max_cache_days days
if ($rec->{action} eq 'userlogin') {
    my $cts = "SELECT COUNT(*)
                 FROM sqlite_master
                WHERE type='table'
                  AND name='log'";
    my $table_exists = $dbh->selectrow_array($cts);
    #create missing table
    if (!$table_exists) {
        my $create_table_sql = "CREATE TABLE log (action varchar(50), artist varchar, title varchar, album varchar,
                                                  station varchar(100), played int(11), duration int(11),
                                                  delay int(11), rating int(11), date_entry timestamp,
                                                  song_url varchar(100), album_url varchar(100),
                                                  artist_url varchar(100))";
        $dbh->do($create_table_sql);
    }
    #update old table
    my $schsth = $dbh->table_info('%','%','log');
    my $schema = $dbh->selectrow_hashref($schsth)->{'sqlite_sql'};
    if ($schema !~ /(song|artist|album)_url/) {
        print "(i) Updating database table ...\n";
        for my $url (qw(song_url album_url artist_url)) {
            $dbh->do("ALTER TABLE log ADD COLUMN $url varchar(100)");
        }
    }
    if (!-e $ctl_file) {
        `mkfifo $ctl_file`;
        my $cfm = (-e $ctl_file)
                ? 'Named pipe created.  Please restart pianobar to autoban tracks.'
                : "Could not mkfifo $ctl_file - please create this file as a named pipe.";
        print "(i) pianobar did not start with 'Control fifo at $ctl_file opened' - please restart pianobar\n";
        print "(i) $cfm\n";
    }
    opendir my $dh, $cover_art_dir or die "Cannot open $cover_art_dir for reading: $!";
    while (my $file = readdir $dh) {
        my $filename = "$cover_art_dir/$file";
        next if !-f $filename || time - (stat _)[10] < (86400 * $max_cache_days);
        my $t = (stat _)[10];
        unlink $filename;
    }
    closedir $dh;
}

my $sql = "INSERT INTO log (action, artist, title, album, station, played, duration, delay, rating, date_entry,        song_url, album_url, artist_url)
                    VALUES (?,      ?,      ?,     ?,     ?,       ?,      ?,        ?,     ?,      current_timestamp, ?,        ?,        ?)";

my $sth   = $dbh->prepare($sql);
my $absql = "SELECT COUNT(*)
               FROM log
              WHERE title    = ?
                AND artist   = ?
                AND album    = ?
                AND duration = ?
                AND action   = 'autoban'";
my $auto_banned = $dbh->selectrow_array($absql, undef, map {$rec->{$_}} qw(title artist album songDuration));
$sth->execute(map {$rec->{$_}} qw(action artist title album stationName songPlayed songDuration delay rating detailUrl artistUrl albumUrl)) if $rec->{action} ne 'songban' || !$auto_banned;
if ($rec->{action} =~ /^song(ban|love)/) {
    my $avg_sql = "SELECT SUM(CASE WHEN action='songban'  THEN 1 ELSE 0 END)/(julianday(Datetime('now')) - julianday(MIN(date_entry))) ban,
                          SUM(CASE WHEN action='autoban'  THEN 1 ELSE 0 END)/(julianday(Datetime('now')) - julianday(MIN(date_entry))) autoban,
                          SUM(CASE WHEN action='songlove' THEN 1 ELSE 0 END)/(julianday(Datetime('now')) - julianday(MIN(date_entry))) love
                     FROM log";
    my $dt_sql  = "SELECT COUNT(*) num, action
                     FROM log
                    WHERE date_entry LIKE Date('now')||'%'
                 GROUP BY action";
    my $at_sql  = "SELECT COUNT (*) num, action
                     FROM log
                 GROUP BY action";
    my $dur_sql = "SELECT AVG(played) time, action
                     FROM log
                    WHERE date_entry LIKE Date('now')||'%'
                 GROUP BY action";
    my $atd_sql = "SELECT AVG(played) time, action
                     FROM log
                 GROUP BY action";
    my $avg = $dbh->selectrow_hashref($avg_sql);
    my $dt  = $dbh->selectall_hashref($dt_sql,'action');
    my $at  = $dbh->selectall_hashref($at_sql,'action');
    my $dur = $dbh->selectall_hashref($dur_sql,'action');
    my $atd = $dbh->selectall_hashref($atd_sql,'action');
    #workday averages
    $avg->{workban}     = ($avg->{ban} ||0)*7/5;
    $avg->{worklove}    = ($avg->{love}||0)*7/5;
    $avg->{workautoban} = ($avg->{autoban} ||0)*7/5;
    for (qw(ban love workban worklove autoban workautoban)) {
        $avg->{$_} = sprintf '%.02f', $avg->{$_};
    }
    for (qw(songban songlove autoban)) {
        $dt->{$_}->{num} ||= 0;
        $at->{$_}->{num} ||= 0;
        $dur->{$_}->{time} ||= 0;
        $atd->{$_}->{time} ||= 0;
    }
    for my $action (keys %$dur) {
        $dur->{$action} = int $dur->{$action}->{time}/1000;
    }
    for my $action (keys %$atd) {
        $atd->{$action} = int $atd->{$action}->{time}/1000;
    }
    $dt->{totalban}->{num} = $dt->{songban}->{num} + $dt->{autoban}->{num};
    $at->{totalban}->{num} = $at->{songban}->{num} + $at->{autoban}->{num};
    my $action = $rec->{rating} && $rec->{rating} == 1 ? '++' : ' --';
    my $today_string    = "Today:\n   Banned:\t$dt->{totalban}->{num} = ($dt->{songban}->{num} + $dt->{autoban}->{num})\n   Loved:\t\t$dt->{songlove}->{num}\n\n\n";
    my $all_time_string = "All Time:\n   Banned:\t$at->{totalban}->{num} = ($at->{songban}->{num} + $at->{autoban}->{num})\n   Loved:\t\t$at->{songlove}->{num}\n\n\n";
    my $averages_string = "Averages:\n   Banned:\t$avg->{ban}\n   AutoBan:\t$avg->{autoban}\n   Loved:\t\t$avg->{love}\n\n\n";
    my $wkdayavg_string = "Workday Averages:\n   Banned:\t$avg->{workban}\n   AutoBan:\t$avg->{workautoban}\n   Loved:\t\t$avg->{worklove}\n\n\n";
    my $tdelay_string   = "Time to mark today:\n   Banned:\t$dur->{songban}sec\n   Loved:\t\t$dur->{songlove}sec\n\n\n";
    my $atdelay_string  = "Time to mark:\n   Banned:\t$atd->{songban}sec\n   Loved:\t\t$atd->{songlove}sec\n\n\n";
    my $song = "$rec->{title} : $rec->{artist}";
    $song =~ s/"/\\"/g;
    `growlnotify -d 12 -t "$action $song" --image "$default_image" -m "$today_string$all_time_string$averages_string$wkdayavg_string$tdelay_string$atdelay_string"`;
}

#TODO add scrobble support
if ($rec->{action} eq 'songfinish') {
    if ($rec->{songDuration} && (($rec->{songPlayed}/$rec->{songDuration}) > $scrobble_percent) && ($rec->{rating}||0) != 2) {
        if ($lastfm_username && $lastfm_password) {
            eval {
                require Audio::Scrobbler;
                my $scrob = Audio::Scrobbler->new(cfg => {
                    username => $lastfm_username,
                    password => $lastfm_password,
                    progname => 'pia',
                    progver  => '1.0',
                }) or die "Couldn't new up Scrobbler\n";
                $scrob->handshake() or die "Scrobbler handshake: ".$scrob->err()."\n";
                $scrob->submit({
                    artist => $rec->{artist},
                    album  => $rec->{album},
                    title  => $rec->{title},
                    length => int($rec->{songDuration}/1000),
                }) or die "Scrobbler submit: ".$scrob->err()."\n";
            };
            print "(i) Scrobbling error: $@\n" if $@;
        }
    }
}
if ($rec->{action} eq 'songstart') {
    #show useful link, song links are most likely useless.
    print "|>  $pandora_url_prefix$rec->{artistUrl}\n";
    #print "|>  $pandora_url_prefix$rec->{albumUrl}\n";
    my $ban   = 0;
    for (qw(artist title album)) {
        $ban = 1 if $rec->{$_} =~ /$auto_ban_regex/;
    }
    my $absql = "SELECT COUNT(*)
                   FROM log
                  WHERE action='songban'
                    AND album = ?
                    AND album_url = ?";
    my $nbsql = "SELECT COUNT(*)
                   FROM log
                  WHERE (action='songlove' OR rating = 1)
                    AND album = ?
                    AND album_url = ?";
    my $album_love = $dbh->selectrow_array($nbsql, undef, $rec->{album}, $rec->{albumUrl});
    my $album_bans = 0;
    $album_bans    = $dbh->selectrow_array($absql, undef, $rec->{album}, $rec->{albumUrl}) if !$album_love;
    $ban           = $album_bans if $album_bans > $max_album_bans;
    if ($ban) {
        my $track = "$rec->{title} - $rec->{artist}";
        $track =~ s/\n//g;
        print "(i) Auto-banning $track...\n";
        if (!-e $ctl_file) {
            print "(i) pianobar did not start with Control fifo at $ctl_file opened - please restart pianobar\n";
            exit;
        }
        $rec->{action} = 'autoban';
        $sth->execute(map {$rec->{$_}} qw(action artist title album stationName songPlayed songDuration delay rating detailUrl artistUrl albumUrl));
        open my $ctf, '>>', $ctl_file;
        print $ctf '-';
        close $ctf;
        exit;
    }
    mkdir $cover_art_dir if !-d $cover_art_dir;
    my ($fn) = $rec->{coverArt} =~ m/([^\/]+)$/;
    $fn ||= '';
    my $album_image = "$cover_art_dir/$fn";
    if ($fn) {
        #allow $max_image_wait sec to retrieve image
        eval {
            local $SIG{'ALRM'} = sub { die 'timeout'; };
            alarm $max_image_wait;
            my $img  = $ua->get($rec->{coverArt})->content;
            if ($img && !-e $album_image && !-d $album_image) {
                open my $fh, '>', $album_image or warn "Can't open $album_image: $!";
                print $fh $img;
                close $fh;
            }
        };
        alarm 0;
    }
    $rec->{rating} = $rec->{rating} && $rec->{rating} == 1 ? '++' : '';
    $album_image = $default_image if !$fn || !-e $album_image || -d $album_image;
    #escape quotes so that the growlnotify command works
    for (qw(title artist album)) {
        $rec->{$_} =~ s/"/\\"/g;
    }
    `growlnotify -d 12 -t "$rec->{title}$rec->{rating}" --image "$album_image" -m "$rec->{artist}\n($rec->{album})"`;
}
